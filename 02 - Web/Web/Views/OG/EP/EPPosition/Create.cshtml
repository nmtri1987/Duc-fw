@using ifinds.Object.OG.Models
@model EPPosition
@{
    ViewBag.Title = "EPPosition";
}
@using (Ajax.BeginForm("Create", "EPPosition",
                new AjaxOptions
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST",
                    UpdateTargetId = "EPPositionlist",
                    LoadingElementId = "loadingDisplay",
                    OnSuccess = "closePopup()",
                    OnBegin = "onBegin",
                    OnComplete = "onComplete",
                }, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(m => m.EPPositionKey)
    @Html.HiddenFor(m => m.CompanyID)


    @Html.HiddenFor(m => m.CreatedUser)
    @Html.HiddenFor(m => m.CreatedDate)

    <div class="ibox float-e-margins">
        <div class="ibox-title">
            @L("EPPosition")
        </div>
        <div class="ibox-content">
            <div id="loadingDisplay" class="progressBarLoad">
                <h2>@L("Progressing")...</h2>
                <div class="progress progress-striped ">
                    <div id="loadProgressBar" class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 20%"></div>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">@L("PositionID")</label>
                <div class="col-sm-10">
                    @Html.EditorFor(model => model.EPPositionKey, new { htmlAttributes = new { @class = "form-control ", @disabled = "", @placeholder = L("PositionIDCD") } })
                    @Html.ValidationMessageFor(model => model.EPPositionKey, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                <label class="col-sm-2 control-label">@L("PositionID")</label>
                <div class="col-sm-10">

                    @if (Model.EPPositionKey.Trim() != SystemConst.AddNew)
                    {

                        @Html.EditorFor(model => model.EPPositionKey, new { htmlAttributes = new { @class = "form-control", @disabled = "" } })
                        @Html.HiddenFor(m => m.EPPositionKey)
                    }
                    else
                    {
                        @Html.EditorFor(model => model.PositionID, new { htmlAttributes = new { @class = "form-control" } })
                    }

                    @Html.ValidationMessageFor(model => model.PositionID, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="form-group">
                <label class="col-sm-2 control-label">@L("Description")</label>
                <div class="col-sm-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control ", @placeholder = L("Description") } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>

        <div class="hr-line-dashed"></div>

        <div class="form-group">
            <div class="col-sm-12">
                <button type="submit" class="btn btn-primary btn-block" name="btnsave" value="save">@L("SaveChange")</button>
            </div>
        </div>
    </div>


}


@Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        $(".chosen-select").select2();
	 var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
		 elems.forEach(function (html) {
		     var switchery = new Switchery(html, { color: '#1AB394' });
		 });
		   $('.date').datepicker({
		     todayBtn: "linked",
		     keyboardNavigation: false,
		     forceParse: false,
		     calendarWeeks: true,
		     autoclose: true
		 });
    });
</script>